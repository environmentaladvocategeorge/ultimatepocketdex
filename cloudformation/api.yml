AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for the API Service

Parameters:
  Environment:
    Type: String
    Description: "Deployment environment."
  ResourceBaseIdentifier:
    Type: String
    Description: "Base identifier for resource naming."
  CognitoUserPoolId:
    Type: String
    Description: "The ID of the Cognito User Pool used for authentication."
  CognitoUserPoolClientId:
    Type: String
    Description: "The Client ID for the Cognito User Pool used for authentication."
  OpenClipEndpointName:
    Type: String
    Description: "Name of the OpenClip SageMaker Endpoint"
  OpenClipImageBucketArn:
    Type: String
    Description: "The ARN of the OpenClip S3 bucket."

Resources:
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../api/
      Handler: main.handler
      Runtime: python3.9
      Timeout: 240
      Environment:
        Variables:
          ENV: !Ref Environment
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
          COGNITO_APP_CLIENT_ID: !Ref CognitoUserPoolClientId
          OPENCLIP_ENDPOINT_NAME: !Ref OpenClipEndpointName
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - rds:*
                - sagemaker:InvokeEndpoint
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource: !Sub "${OpenClipImageBucketArn}/*"
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /user
            Method: GET
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: CognitoAuthorizer
        GetUserCard:
          Type: Api
          Properties:
            Path: /user/card
            Method: GET
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: CognitoAuthorizer
        AddCardToUser:
          Type: Api
          Properties:
            Path: /user/card
            Method: POST
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: CognitoAuthorizer
        Search:
          Type: Api
          Properties:
            Path: /search
            Method: GET
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: CognitoAuthorizer
        ImageSearch:
          Type: Api
          Properties:
            Path: /search/image
            Method: POST
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: CognitoAuthorizer
        GetPokemon:
          Type: Api
          Properties:
            Path: /pokemon
            Method: GET
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: CognitoAuthorizer
        GetCardSet:
          Type: Api
          Properties:
            Path: /card-set
            Method: GET
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: CognitoAuthorizer

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      Auth:
        AddDefaultAuthorizerToCorsPreflight: False
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
            IdentitySource: "method.request.header.Authorization"
            ValidationExpression: "^Bearer [A-Za-z0-9-_=.]+$"

  SchedulerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../api/
      Handler: scheduling.scheduler_handler.lambda_handler
      Runtime: python3.9
      Timeout: 900
      MemorySize: 512
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - rds:*
              Resource: "*"
      Events:
        SynchronizeCardSetsDaily:
          Type: Schedule
          Properties:
            Schedule: "cron(0 9 * * ? *)"
            Input: '{"event_type": "synchronize_card_sets"}'
        SynchronizePokemonMonthly:
          Type: Schedule
          Properties:
            Schedule: "cron(0 9 1 * ? *)"
            Input: '{"event_type": "synchronize_pokemon"}'

Outputs:
  ApiUrl:
    Description: "URL of the API"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
